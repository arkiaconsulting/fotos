name: Frontend CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'terraform/**'
      - '.github/workflows/**'

permissions:
  contents: read
  id-token: write

env:
  DOCKER_IMAGE_NAME: fotos-web

jobs:
  paths-filter:
    runs-on: ubuntu-latest
    outputs:
      isCodeChange: ${{ steps.filter.outputs.codeChange }}
      isTerraformChange: ${{ steps.filter.outputs.terraformChange }}
      isWorkflowChange: ${{ steps.filter.outputs.workflowChange }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          codeChange:
            - 'src/**'
          terraformChange:
            - 'terraform/**'
          workflowChange:
            - '.github/workflows/**'

    - name: Is Code Change
      run: |
        echo "Code change: ${{ steps.filter.outputs.codeChange }}"

    - name: Is Terraform Change
      run: |
        echo "Terraform change: ${{ steps.filter.outputs.terraformChange }}"

    - name: Is Workflow Change
      run: |
        echo "Workflow change: ${{ steps.filter.outputs.workflowChange }}"

  build:
    runs-on: self-hosted
    needs: paths-filter
    if: ${{ needs.paths-filter.outputs.isCodeChange == 'true' || needs.paths-filter.outputs.isWorkflowChange == 'true' }}
    steps:
    - uses: actions/checkout@v4

    - name: Docker Login
      uses: docker/login-action@v3
      with:
        username: ${{ vars.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
        registry: ${{ vars.REGISTRY_HOST }}

    - name: Build and Push Image
      uses: docker/build-push-action@v5
      with:
        context: src
        push: true
        tags: ${{ vars.REGISTRY_HOST }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        build-args: --platform linux/amd64

  tests:
    runs-on: self-hosted
    env:
      TESTS_PROJECT_PATH: src/Fotos.Tests/Fotos.Tests.csproj
      DOTNET_INSTALL_DIR: ./.dotnet

    needs: paths-filter
    if: ${{ needs.paths-filter.outputs.isCodeChange == 'true' || needs.paths-filter.outputs.isWorkflowChange == 'true' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.x
          
      - name: Restore frontend test dependencies
        run: dotnet build ${{ env.TESTS_PROJECT_PATH }}

      - name: Run frontend tests
        run: dotnet test ${{ env.TESTS_PROJECT_PATH }} --no-build --no-restore --filter "Category=Unit"

  terraform:
    runs-on: self-hosted
    defaults:
      run:
        working-directory: ./terraform
    env:
      ARM_CLIENT_ID: ${{ secrets.DEPLOY_AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AKC_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AKC_SUBSCRIPTION_ID }}
      ARM_USE_AZUREAD: true
      ARM_USE_OIDC: true
      TF_VAR_fotos_google_client_id: ${{ secrets.GOOGLE_CLIENT_ID }}
      TF_VAR_fotos_google_client_secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
    
    needs: paths-filter
    if: ${{ needs.paths-filter.outputs.isTerraformChange == 'true' || needs.paths-filter.outputs.isWorkflowChange == 'true' }}
    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-node@v2
      with:
        node-version: '22'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.11.4

    - name: Terraform Init
      run: >
        terraform init -input=false -backend-config=environments/backend.config

    - name: Terraform Plan
      run: terraform plan -input=false -out=tfplan -var-file="environments/variables.tfvars"

    - name: Terraform Apply
      run: terraform apply -input=false -auto-approve tfplan

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [build, terraform]
  #   defaults:
  #     run:
  #       working-directory: ./terraform
  #   steps:
  #     - name: Az CLI login
  #       uses: azure/login@v2
  #       with:
  #         client-id: ${{ secrets.DEPLOY_AZURE_CLIENT_ID }}
  #         tenant-id: ${{ secrets.AKC_TENANT_ID }}
  #         subscription-id: ${{ secrets.AKC_SUBSCRIPTION_ID }}

  #     - name: Update Container App
  #       uses: azure/cli@v2
  #       with:
  #         azcliversion: latest
  #         inlineScript: |
  #           containerAppId=$(az containerapp list --output tsv --query "[?tags.project=='fotos'].id")
  #           echo "Container App ID: $containerAppId"
  #           az containerapp update \
  #           --ids $containerAppId \
  #           --image ${{ env.ACR_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} \
  #           --set-env-vars "OTEL_EXPORTER_OTLP_HEADERS=Authorization=Basic ${{ secrets.GRAFANA_ENCODED_API_KEY }}" \
  #           "OTEL_EXPORTER_OTLP_ENDPOINT=https://otlp-gateway-prod-eu-west-2.grafana.net/otlp" \
  #           "OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf"
        