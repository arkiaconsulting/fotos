@using Fotos.App.Adapters
@using Microsoft.AspNetCore.Components.Server.Circuits
@using System.Security.Claims

@inherits LayoutComponentBase

@inject IHostEnvironment HostEnvironment

<MudThemeProvider @ref=@_mudThemeProvider Theme="FotosTheme" @bind-IsDarkMode=@_isDarkMode />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<CustomErrorBoundary @ref="errorBoundary">
    <ChildContent>
        <MudLayout>
            <MudAppBar>
                <MudIconButton Icon="@Icons.Material.Filled.Home" Size="Size.Large" Href="/" />
                <MudText Typo="Typo.h3">Fotos</MudText>
                <MudSpacer />
                <MudSwitch @bind-Value="_isDarkMode" Class="ma-4" T="bool" Label="Dark Mode" />
                <AuthorizeView>
                    <Authorized>
                        <MudMenu ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.CenterRight" TransformOrigin="Origin.CenterRight">
                            <ActivatorContent>
                                <MudChip T="string" Icon="@Icons.Material.Filled.AccountCircle">@context.User.FindFirst(ClaimTypes.GivenName)?.Value</MudChip>
                            </ActivatorContent>
                            <ChildContent>
                                <form id="logout" method="post" action="/account/logout?returnUrl=/">
                                    <MudButton ButtonType="ButtonType.Submit">
                                        <MudMenuItem IconSize="Size.Small" Icon="@Icons.Material.Filled.Logout">
                                            <input type="hidden" name="returnUrl" value="/account/signin" />
                                            Logout
                                        </MudMenuItem>
                                    </MudButton>
                                </form>
                            </ChildContent>
                        </MudMenu>
                    </Authorized>
                </AuthorizeView>
            </MudAppBar>
            <MudMainContent>
                <MudContainer MaxWidth="MaxWidth.ExtraLarge">
                    @Body
                </MudContainer>
            </MudMainContent>
        </MudLayout>
    </ChildContent>
    <ErrorContent>
        <div class="alert alert-danger" role="alert">
            <p class="fs-3 fw-bold">😈 A rotten gremlin got us. Sorry!</p>
            <p>@context.Message</p>
            @if (HostEnvironment.IsDevelopment()) {
                <p>@context.StackTrace</p>
            }
            <button class="btn btn-info" @onclick="_ => errorBoundary?.Recover()">
                Clear
            </button>
        </div>
    </ErrorContent>
</CustomErrorBoundary>

@code {
    private ErrorBoundary? errorBoundary = default!;
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider = default!;
    private MudTheme FotosTheme = new()
        {
            PaletteLight = new()
            {
                AppbarBackground = Colors.BlueGray.Lighten1,
                AppbarText = Colors.BlueGray.Lighten3,
                Background = Colors.BlueGray.Lighten5,
                Primary = Colors.Gray.Darken4,
                Secondary = Colors.Teal.Lighten1,
                Surface = Colors.BlueGray.Lighten4,
                TextPrimary = Colors.BlueGray.Darken1,
            },
            PaletteDark = new()
            {
                AppbarBackground = Colors.Gray.Darken4,
                Background = Colors.Gray.Darken3,
                Primary = Colors.Gray.Darken4,
                Secondary = Colors.Teal.Darken1,
                Surface = Colors.Gray.Darken4,
            }
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();

            StateHasChanged();
        }
    }
}