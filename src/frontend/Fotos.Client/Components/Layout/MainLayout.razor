@inherits LayoutComponentBase

@inject IHostEnvironment HostEnvironment

<MudThemeProvider @ref=@_mudThemeProvider Theme="FotosTheme" @bind-IsDarkMode=@_isDarkMode />
<MudPopoverProvider />
<MudSnackbarProvider />

<CustomErrorBoundary @ref="errorBoundary">
    <ChildContent>
        <MudLayout>
            <MudAppBar>
                <MudNavLink Href="/">
                    <MudText Typo="Typo.h3">Fotos</MudText>
                </MudNavLink>
                <MudSpacer />
                <MudSwitch @bind-Value="_isDarkMode" Color="Color.Primary" Class="ma-4" T="bool" Label="Dark Mode" />
            </MudAppBar>
            <MudMainContent>
                @Body
            </MudMainContent>
        </MudLayout>
    </ChildContent>
    <ErrorContent>
        <div class="alert alert-danger" role="alert">
            <p class="fs-3 fw-bold">😈 A rotten gremlin got us. Sorry!</p>
            <p>@context.Message</p>
            @if (HostEnvironment.IsDevelopment())
            {
                <p>@context.StackTrace</p>
            }
            <button class="btn btn-info" @onclick="_ => errorBoundary?.Recover()">
                Clear
            </button>
        </div>
    </ErrorContent>
</CustomErrorBoundary>

@code {
    private ErrorBoundary? errorBoundary = default!;
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider = default!;
    private MudTheme FotosTheme = new()
        {
            PaletteLight = new()
            {
                AppbarBackground = Colors.BlueGray.Lighten1,
                AppbarText = Colors.BlueGray.Darken2,
                Background = Colors.BlueGray.Lighten5
            },
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }
}