@using Fotos.Client.Components.Models
@using Fotos.Client.Features.PhotoFolders

@inject ListPhotos ListPhotos
@inject RemovePhoto RemovePhoto
@inject GetOriginalUri GetOriginalUri
@inject GetThumbnailUri GetThumbnailUri

<MudStack id="thumbnails" Row Wrap="Wrap.Wrap">
    @foreach (var thumbnail in _thumbnails)
    {
        <MudCard Class="thumbnail">
            <MudCardContent Class="py-0">
                <MudButton class="view" ondblclick="@(() => ViewPhoto(thumbnail))">
                    <MudImage src="@thumbnail.ThumbnailUri?.ToString()" alt="@thumbnail.Title" Width="200" Height="133" ObjectFit="ObjectFit.Contain" />
                </MudButton>
            </MudCardContent>
            <MudCardActions Class="d-flex justify-end py-0">
                <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" OnClick="@(() => RemoveAPhoto(thumbnail))" Class="remove" Size="Size.Small" />
            </MudCardActions>
        </MudCard>
    }
</MudStack>

<MudOverlay id="photo" @bind-Visible="IsPhotoDisplayed" DarkBackground AutoClose OnClosed="DismissPhoto">
    <MudImage src="@_photo?.OriginalUri?.ToString()" Width="1024" Height="768" ObjectFit="ObjectFit.Contain" />
</MudOverlay>

@code {
    [Parameter]
    public Guid FolderId { get; set; }

    [Parameter]
    public Guid AlbumId { get; set; }

    public bool IsPhotoDisplayed
    {
        get
        {
            return _photo is not null;
        }
        set { }
    }

    private List<PhotoModel> _thumbnails = [];
    private PhotoModel? _photo = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _thumbnails = (await ListPhotos(FolderId, AlbumId)).Select(p => new PhotoModel(p.FolderId, p.AlbumId, p.Id, p.Title)).ToList();
            await SetThumbnailUris();

            StateHasChanged();
        }
    }

    internal void AddPhoto(Photo photo)
    {
        _thumbnails.Add(new(photo.FolderId, photo.AlbumId, photo.Id, photo.Title));

        StateHasChanged();
    }

    private async Task RemoveAPhoto(PhotoModel photo)
    {
        await RemovePhoto(photo.FolderId, photo.AlbumId, photo.Id);
        _thumbnails.Remove(photo);

        StateHasChanged();
    }

    private async Task ViewPhoto(PhotoModel photo)
    {
        var originalUri = await GetOriginalUri(photo.FolderId, photo.AlbumId, photo.Id);

        photo.OriginalUri = originalUri;
        _photo = photo;

        StateHasChanged();
    }

    private void DismissPhoto()
    {
        _photo = null;

        StateHasChanged();
    }

    private async Task SetThumbnailUris()
    {
        foreach (var photo in _thumbnails)
        {
            photo.ThumbnailUri = await GetThumbnailUri(photo.FolderId, photo.AlbumId, photo.Id);
        }
    }
}
