@using Fotos.Client.Components.Models
@using Fotos.Client.Features.PhotoFolders

@inject ListPhotos ListPhotos
@inject RemovePhoto RemovePhoto
@inject GetOriginalUri GetOriginalUri

<div id="thumbnails">
    @foreach (var thumbnail in _thumbnails)
    {
        <div class="thumbnail">
            <button class="view" onclick="@(() => ViewPhoto(thumbnail))">
                <img src="img/new.png" style="max-width: 50px" />
            </button>
            <span>@thumbnail.Title</span>
            <button class="remove btn btn-error" onclick="@(() => RemoveAPhoto(thumbnail))">X</button>
        </div>
    }
</div>

@if(_photo is not null)
{
    <div id="photo">
        <img src="@_photo.OriginalUri.ToString()" style="max-width: 500px"/>
        <button class="dismiss btn btn-error" @onclick="DismissPhoto">X</button>
    </div>
}
@code {
    [Parameter]
    public Guid FolderId { get; set; }

    [Parameter]
    public Guid AlbumId { get; set; }

    private List<Photo> _thumbnails = [];
    private PhotoModel? _photo = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _thumbnails = (await ListPhotos(FolderId, AlbumId)).ToList();

            StateHasChanged();
        }
    }

    public void AddPhoto(Photo photo)
    {
        _thumbnails.Add(photo);

        StateHasChanged();
    }

    private async Task RemoveAPhoto(Photo photo)
    {
        await RemovePhoto(photo.FolderId, photo.AlbumId, photo.Id);
        _thumbnails.Remove(photo);

        StateHasChanged();
    }

    private async Task ViewPhoto(Photo photo)
    {
        var originalUri = await GetOriginalUri(photo.FolderId, photo.AlbumId, photo.Id);

        _photo = new(photo.FolderId, photo.AlbumId, photo.Id, originalUri);

        StateHasChanged();
    }

    private void DismissPhoto()
    {
        _photo = null;

        StateHasChanged();
    }
}
