@using Fotos.Client.Adapters
@using Fotos.Client.Components.Models
@using Fotos.Client.Features.PhotoFolders

@inject ListPhotos ListPhotos
@inject RemovePhoto RemovePhoto
@inject GetOriginalUri GetOriginalUri
@inject GetThumbnailUri GetThumbnailUri
@inject UpdatePhoto UpdatePhoto

<MudPopover Open=_showDetails Class="pa-4" OverflowBehavior="OverflowBehavior.FlipNever" Fixed
AnchorOrigin="Origin.CenterRight" TransformOrigin="Origin.CenterRight">
    <MudStack id="details" Style="width: 400px">
        <MudStack Row AlignItems="AlignItems.Start" Class="pt-0">
            <MudTextField T="string" id="title" Typo="Typo.body2" @bind-Text="@_photo.Title" Margin="Margin.Dense" ValueChanged="PhotoRenamed" TextUpdateSuppression />
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" OnClick="@(() => RemoveAPhoto(_photo))" Class="remove" Size="Size.Medium" />
            <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick=CloseDetails Size="Size.Medium" />
        </MudStack>
        <MudGrid>
            <MudItem xs="4"><MudText Class="d-flex justify-start mud-width-full"  Typo="Typo.body2">Date taken</MudText></MudItem>
            <MudItem xs="8"><MudText Class="d-flex justify-end mud-width-full" Typo="Typo.body2">@_photo.Metadata.DateTaken</MudText></MudItem>
            <MudItem xs="4"><MudText Class="d-flex justify-start mud-width-full" Typo="Typo.body2">Device</MudText></MudItem>
            <MudItem xs="8"><MudText Class="d-flex justify-end mud-width-full" Typo="Typo.body2">Sais pas</MudText></MudItem>
        </MudGrid>
    </MudStack>
</MudPopover>
<MudStack id="thumbnails" Row Wrap="Wrap.Wrap" Class="mt-12">

    @foreach (var thumbnail in _thumbnails)
    {
        <div class="thumbnail">
            <MudButton class="view" ondblclick="@(() => ViewPhoto(thumbnail))" OnClick="@(() => ShowDetails(thumbnail))">
                <MudImage src="@thumbnail.ThumbnailUri?.ToString()" alt="@thumbnail.Title" Width="200" Height="133" ObjectFit="ObjectFit.Contain" />
            </MudButton>
        </div>
    }
</MudStack>
<MudOverlay id="photo" @bind-Visible="_isPhotoDisplayed" DarkBackground AutoClose OnClosed="DismissPhoto">
    <MudImage src="@(_photo.OriginalUri?.ToString())" ObjectFit="ObjectFit.Contain" Style="max-height: 85vh" />
</MudOverlay>

@code {
    [Parameter]
    public Guid FolderId { get; set; }

    [Parameter]
    public Guid AlbumId { get; set; }

    [Parameter]
    public EventCallback OnLoaded { get; set; }

    private bool _isPhotoDisplayed;

    private List<PhotoModel> _thumbnails = [];
    private PhotoModel _photo = PhotoModel.Default();
    private bool _showDetails;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _thumbnails = (await ListPhotos(new(FolderId, AlbumId))).Select(p => new PhotoModel(p.FolderId, p.AlbumId, p.Id, p.Title, p.Metadata)).ToList();
            await SetThumbnailUris();

            await OnLoaded.InvokeAsync(null);

            StateHasChanged();
        }
    }

    internal void AddPhoto(PhotoModel photo)
    {
        _thumbnails.Add(photo);

        StateHasChanged();
    }

    private async Task RemoveAPhoto(PhotoModel photo)
    {
        await RemovePhoto(new(photo.FolderId, photo.AlbumId, photo.Id));
        _thumbnails.Remove(photo);
        CloseDetails();

        StateHasChanged();
    }

    private async Task ViewPhoto(PhotoModel photo)
    {
        var originalUri = await GetOriginalUri(new(photo.FolderId, photo.AlbumId, photo.Id));

        photo.OriginalUri = originalUri;
        _photo = photo;
        _isPhotoDisplayed = true;

        StateHasChanged();
    }

    private void DismissPhoto()
    {
        _isPhotoDisplayed = false;
    }

    private async Task SetThumbnailUris()
    {
        foreach (var photo in _thumbnails)
        {
            photo.ThumbnailUri = await GetThumbnailUri(new(photo.FolderId, photo.AlbumId, photo.Id));
        }
    }

    private void ShowDetails(PhotoModel photo)
    {
        _photo = photo;
        _showDetails = true;
    }

    private async Task PhotoRenamed(string newValue)
    {
        if (_photo is null || newValue == _photo!.Title)
        {
            return;
        }

        _photo.Title = newValue;

        await UpdatePhoto(new(_photo.FolderId, _photo.AlbumId, _photo.Id), newValue);
    }

    private void CloseDetails()
    {
        _showDetails = false;
    }

    public async Task OnNewThumbnail(Guid folderId, Guid albumId, Guid id)
    {
        var photo = _thumbnails.FirstOrDefault(p => p.FolderId == folderId && p.AlbumId == albumId && p.Id == id);
        if (photo is null)
        {
            return;
        }

        photo.ThumbnailUri = await GetThumbnailUri(new(folderId, albumId, id));
        StateHasChanged();
    }
}
