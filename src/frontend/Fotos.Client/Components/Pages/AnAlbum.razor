@page "/album/{FolderId:guid}/{AlbumId:guid}"
@using Fotos.Client.Features.PhotoFolders

@inject GetAlbum GetAlbum
@inject ListPhotos ListPhotos
@inject AddPhoto AddPhoto
@inject RemovePhoto RemovePhoto

@if (_loading)
{
    <h3>Loading...</h3>
}
else
{
    <div id="album">
        <h3 id="album-name">@_album!.Name</h3>
        <span>New photo</span><InputFile OnChange="UploadPhoto" />
    </div>

    <div id="photos">
        @foreach (var photo in _photos)
        {
            <div class="photo">
                <img src="@photo.Url" style="background-color:black" width="50" height="50" />
                <button class="btn btn-error" onclick="@(() => RemoveAPhoto(photo.Id))">X</button>
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public Guid AlbumId { get; set; }

    [Parameter]
    public Guid FolderId { get; set; }

    private bool _loading = true;
    private Album _album = new();
    private List<Photo> _photos = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _album = await GetAlbum(FolderId, AlbumId);
            _photos = (await ListPhotos(FolderId, AlbumId)).ToList();
            _loading = false;

            StateHasChanged();
        }
    }

    private async Task UploadPhoto(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);

        await AddPhoto(FolderId, AlbumId, buffer);

        var photo = new Photo(Guid.Empty, AlbumId, new Uri("../img/new.png", UriKind.Relative));
        _photos.Add(photo);
    }

    private async Task RemoveAPhoto(Guid photoId)
    {
        await RemovePhoto(FolderId, AlbumId, photoId);

        _photos.RemoveAll(p => p.Id == photoId);
        StateHasChanged();
    }
}
