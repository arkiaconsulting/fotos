@page "/"
@using Fotos.Client.Features.PhotoFolders
@using System.Collections.ObjectModel

@inject ListFolders ListFolders
@inject CreateFolder CreateFolder
@inject GetFolder GetFolder
@inject RemoveFolder RemoveFolder

<PageTitle>Home</PageTitle>
@if (!_loaded)
{
    <p id="loader">Loading...</p>
}
else
{
    <p id="current-folder-name">@_currentFolder.Name</p>
    <p>
        <InputText @bind-Value="_newFolder" />
        <button class="btn btn-primary" @onclick="CreateNewFolder">Create Folder</button>
    </p>
    <p>
        <button id="up" class="btn btn-primary" @onclick="GotToParentFolder" disabled="@(_currentFolder.ParentId == Guid.Empty)">Go to parent</button>
    </p>
    <ul>
        @foreach (var folder in _folders)
        {
            <li>@folder.Name
                <button id="go" class="btn btn-primary" @onclick="() => GotToFolder(folder)">Go</button>
                <button id="remove" class="btn btn-primary" @onclick="() => RemoveThisFolder(folder)">X</button></li>
        }
    </ul>
}

@code {
    private List<Folder> _folders = [];
    private Folder _currentFolder = new();
    private string _newFolder = string.Empty;
    private bool _loaded = false;

    protected override async Task OnInitializedAsync()
    {
        await Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _currentFolder = (await ListFolders(Guid.Empty)).Single();

            await RefreshFolders();

            _loaded = true;
            StateHasChanged();
        }
    }

    private async Task RefreshFolders()
    {
        _folders = (await ListFolders(_currentFolder.Id)).ToList();
    }

    private async Task CreateNewFolder()
    {
        await CreateFolder(_currentFolder.Id, _newFolder);

        await RefreshFolders();
        _newFolder = string.Empty;
    }

    private async Task GotToFolder(Folder folder)
    {
        _currentFolder = folder;

        await RefreshFolders();
    }

    private async Task GotToParentFolder()
    {
        _currentFolder = await GetFolder(_currentFolder.ParentId);

        await RefreshFolders();
    }

    private async Task RemoveThisFolder(Folder folder)
    {
        await RemoveFolder(folder.Id);

        _folders.Remove(folder);
    }
}