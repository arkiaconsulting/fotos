@page "/"
@using Fotos.Client.Adapters
@using Fotos.Client.Features.PhotoFolders
@using System.Collections.ObjectModel

@inject ListFolders ListFolders
@inject CreateFolder CreateFolder
@inject RemoveFolder RemoveFolder
@inject GetFolder GetFolder
@inject CreateAlbum CreateAlbum
@inject ListAlbums ListAlbums
@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>
@if (!_loaded)
{
    <p id="loader">Loading...</p>
}
else
{
    <MudStack Row="true" AlignItems="AlignItems.Center" Class="mt-4" Justify="Justify.SpaceBetween">
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd">
            <MudText id="current-folder-name" Typo="Typo.h5">@_currentFolder.Name</MudText>
            <MudIconButton id="up" Icon="@Icons.Material.Filled.ArrowUpward" OnClick="GotToParentFolder" Disabled="@(_currentFolder.ParentId == Guid.Empty)" Size="Size.Small" />
        </MudStack>
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd">
            <div><MudTextField @bind-Value="_newFolder" Label="New folder" Variant="Variant.Text" Margin="Margin.Dense" ShrinkLabel Immediate /></div>
            <MudIconButton id="create-folder" Icon="@Icons.Material.Filled.Add" OnClick="CreateNewFolder" Disabled="@(string.IsNullOrWhiteSpace(_newFolder))" Size="Size.Small" />
        </MudStack>
    </MudStack>
    <MudDivider Class="pa-4 mt-2" />
    <MudStack id="folders" Row="true" Spacing="5" Wrap="Wrap.Wrap">
        @foreach (var folder in _folders)
        {
            <FolderItem Folder="folder" OnFolderChanged="GoToFolder" OnFolderRemoved="RemoveThisFolder" />
        }
    </MudStack>
    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mt-8">
        <MudText Typo="Typo.h5">Albums</MudText>
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd">
            <div><MudTextField id="new-album-name" @bind-Value="_newAlbumName" Label="New album" Variant="Variant.Text" Margin="Margin.Dense" ShrinkLabel Immediate /></div>
            <MudIconButton id="create-album" Icon="@Icons.Material.Filled.Add" OnClick="CreateNewAlbum" Size="Size.Small" Disabled="@(string.IsNullOrWhiteSpace(_newAlbumName))" />
        </MudStack>
    </MudStack>
    <MudDivider Class="pa-4 mt-2" />
    <MudStack id="albums" Row="true" Spacing="5" Wrap="Wrap.Wrap">
        @foreach (var album in _albums)
        {
            <AlbumItem Album="album" OnAlbumChanged="@(() => GoToAlbum(album.Id))" />
        }
    </MudStack>
}

@code {
    [SupplyParameterFromQuery]
    public Guid FolderId { get; set; } = Guid.Empty;

    [SupplyParameterFromQuery]
    public Guid ParentId { get; set; }

    private List<FolderModel> _folders = [];
    private List<AlbumModel> _albums = [];
    private FolderModel _currentFolder = new();
    private string _newFolder = string.Empty;
    private string _newAlbumName = string.Empty;
    private bool _loaded = false;
    private Guid _parentIdOfParent = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        await Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var folder = default(FolderDto);
            if (FolderId == Guid.Empty)
            {
                folder = (await ListFolders(FolderId)).Single();
            }
            else
            {
                folder = await GetFolder(ParentId, FolderId);
            }

            _currentFolder = new FolderModel { Id = folder.Id, ParentId = folder.ParentId, Name = folder.Name };

            await RefreshFoldersAndAlbums();

            _loaded = true;
            StateHasChanged();
        }
    }

    private async Task RefreshFoldersAndAlbums()
    {
        _folders = (await ListFolders(_currentFolder.Id)).Select(dto => new FolderModel { Id = dto.Id, ParentId = dto.ParentId, Name = dto.Name }).ToList();
        _albums = (await ListAlbums(_currentFolder.Id)).Select(dto => new AlbumModel { Id = dto.Id, FolderId = dto.FolderId, Name = dto.Name }).ToList();
    }

    private async Task CreateNewFolder()
    {
        await CreateFolder(_currentFolder.Id, _newFolder);

        await RefreshFoldersAndAlbums();
        _newFolder = string.Empty;
    }

    private async Task GotToParentFolder()
    {
        var folder = await GetFolder(_parentIdOfParent, _currentFolder.ParentId);
        _currentFolder = new FolderModel { Id = folder.Id, ParentId = folder.ParentId, Name = folder.Name };
        _parentIdOfParent = _currentFolder.ParentId;

        await RefreshFoldersAndAlbums();
    }

    private async Task RemoveThisFolder(FolderModel folder)
    {
        await RemoveFolder(folder.ParentId, folder.Id);

        _folders.Remove(folder);
    }

    private async Task CreateNewAlbum()
    {
        await CreateAlbum(_currentFolder.Id, _newAlbumName);
        await RefreshFoldersAndAlbums();
        _newAlbumName = string.Empty;
    }

    private async Task GoToFolder(FolderModel folder)
    {
        _parentIdOfParent = _currentFolder.ParentId;
        _currentFolder = folder;

        await RefreshFoldersAndAlbums();
    }

    private void GoToAlbum(Guid albumId)
    {
        NavigationManager.NavigateTo($"album/{_currentFolder.ParentId}/{_currentFolder.Id}/{albumId}");
    }
}