@page "/"
@using Fotos.Client.Adapters
@using Fotos.Client.Features.PhotoFolders
@using System.Collections.ObjectModel

@inject ListFolders ListFolders
@inject CreateFolder CreateFolder
@inject GetFolder GetFolder
@inject RemoveFolder RemoveFolder
@inject CreateAlbum CreateAlbum
@inject ListAlbums ListAlbums
@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>
@if (!_loaded)
{
    <p id="loader">Loading...</p>
}
else
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge">
        <MudStack Row="true" AlignItems="AlignItems.Center" Class="mt-4" Justify="Justify.SpaceBetween">
            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd">
                <MudText id="current-folder-name" Typo="Typo.h5">@_currentFolder.Name</MudText>
                <MudIconButton id="up" Icon="@Icons.Material.Filled.ArrowUpward" Color="Color.Inherit" OnClick="GotToParentFolder" Disabled="@(_currentFolder.ParentId == Guid.Empty)" Size="Size.Small" />
            </MudStack>
            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd">
                <div><MudTextField @bind-Value="_newFolder" Label="New folder" Variant="Variant.Text" Margin="Margin.Dense" ShrinkLabel /></div>
                <MudIconButton id="create-folder" Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="CreateNewFolder" Size="Size.Small" />
            </MudStack>
        </MudStack>
        <MudPaper Outlined="true" Class="pa-4 mt-2">
            <MudStack id="folders" Row="true" Class="mt-4" Spacing="5" Wrap="Wrap.Wrap">
                @foreach (var folder in _folders)
                {
                    <MudCard Class="folder">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Class="title" Typo="Typo.h6">@folder.Name</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton id="go" Icon="@Icons.Material.Filled.ArrowForward" OnClick="@(() => GotToFolder(folder))" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardActions>
                            <MudIconButton id="remove" Icon="@Icons.Material.Filled.DeleteForever" Size="Size.Small" OnClick="@(() => RemoveThisFolder(folder))" />
                        </MudCardActions>
                    </MudCard>
                }
            </MudStack>
        </MudPaper>
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mt-6">
            <MudText Typo="Typo.h5">Albums</MudText>
            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd">
                <div><MudTextField id="new-album-name" @bind-Value="_newAlbumName" Label="New album" Variant="Variant.Text" Margin="Margin.Dense" ShrinkLabel /></div>
                <MudIconButton id="create-album" Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="CreateNewAlbum" Size="Size.Small" />
            </MudStack>
        </MudStack>
        <MudPaper Outlined="true" Class="pa-4 mt-2">
            <MudStack id="albums" Row="true" Class="mt-4" Spacing="5" Wrap="Wrap.Wrap">
                @foreach (var album in _albums)
                {
                    <MudCard Class="folder">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Class="title" Typo="Typo.h6">@album.Name</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton id="go" Icon="@Icons.Material.Filled.ArrowForward" OnClick="@(() => GoToAlbum(album.Id))" />
                            </CardHeaderActions>
                        </MudCardHeader>
                    </MudCard>
                }
            </MudStack>
        </MudPaper>
    </MudContainer>
}

@code {
    [SupplyParameterFromQuery]
    public Guid FolderId { get; set; } = Guid.Empty;

    [SupplyParameterFromQuery]
    public Guid ParentId { get; set; }

    private List<Folder> _folders = [];
    private List<Album> _albums = [];
    private Folder _currentFolder = new();
    private string _newFolder = string.Empty;
    private string _newAlbumName = string.Empty;
    private bool _loaded = false;
    private Guid _parentIdOfParent = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        await Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (FolderId == Guid.Empty)
            {
                _currentFolder = (await ListFolders(FolderId)).Single();
            }
            else
            {
                _currentFolder = await GetFolder(ParentId, FolderId);
            }

            await RefreshFoldersAndAlbums();

            _loaded = true;
            StateHasChanged();
        }
    }

    private async Task RefreshFoldersAndAlbums()
    {
        _folders = (await ListFolders(_currentFolder.Id)).ToList();
        _albums = (await ListAlbums(_currentFolder.Id)).ToList();
    }

    private async Task CreateNewFolder()
    {
        await CreateFolder(_currentFolder.Id, _newFolder);

        await RefreshFoldersAndAlbums();
        _newFolder = string.Empty;
    }

    private async Task GotToFolder(Folder folder)
    {
        _parentIdOfParent = _currentFolder.ParentId;
        _currentFolder = folder;

        await RefreshFoldersAndAlbums();
    }

    private async Task GotToParentFolder()
    {
        _currentFolder = await GetFolder(_parentIdOfParent, _currentFolder.ParentId);
        _parentIdOfParent = _currentFolder.ParentId;

        await RefreshFoldersAndAlbums();
    }

    private async Task RemoveThisFolder(Folder folder)
    {
        await RemoveFolder(folder.ParentId, folder.Id);

        _folders.Remove(folder);
    }

    private async Task CreateNewAlbum()
    {
        await CreateAlbum(_currentFolder.Id, _newAlbumName);
        await RefreshFoldersAndAlbums();
        _newAlbumName = string.Empty;
    }

    private void GoToAlbum(Guid albumId)
    {
        NavigationManager.NavigateTo($"album/{_currentFolder.ParentId}/{_currentFolder.Id}/{albumId}");
    }
}