@page "/"
@using Fotos.Client.Adapters
@using Fotos.Client.Components.Dialogs
@using Fotos.Client.Features.PhotoFolders
@using System.Collections.ObjectModel
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ListFolders ListFolders
@inject CreateFolder CreateFolder
@inject RemoveFolder RemoveFolder
@inject GetFolder GetFolder
@inject CreateAlbum CreateAlbum
@inject ListAlbums ListAlbums
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject SessionData SessionData

<PageTitle>Fotos Folders</PageTitle>

@if (_loaded)
{
    <MudStack Row="true" AlignItems="AlignItems.Center" Class="mt-4" Justify="Justify.SpaceBetween">
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd">
            <MudText id="current-folder-name" Typo="Typo.h5">@CurrentFolder.Name</MudText>
            <MudIconButton id="up" Icon="@Icons.Material.Filled.ArrowUpward" OnClick="GotToParentFolder" Disabled="@(CurrentFolder.ParentId == Guid.Empty)" Size="Size.Small" />
            <MudIconButton id="current-folder-settings" Icon="@Icons.Material.Filled.Settings" OnClick="OpenCurrentFolderSettings" Size="Size.Small" />
        </MudStack>
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd">
            <div><MudTextField @bind-Value="_newFolder" Label="New folder" Variant="Variant.Text" Margin="Margin.Dense" ShrinkLabel Immediate /></div>
            <MudIconButton id="create-folder" Icon="@Icons.Material.Filled.Add" OnClick="CreateNewFolder" Disabled="@(string.IsNullOrWhiteSpace(_newFolder))" Size="Size.Small" />
        </MudStack>
    </MudStack>
    <MudDivider Class="pa-4 mt-2" />
    <MudStack id="folders" Row="true" Spacing="5" Wrap="Wrap.Wrap">
        @foreach (var folder in _childFolders)
        {
            <FolderItem Folder="folder" OnFolderChanged="GoToFolder" OnFolderRemoved="RemoveThisFolder" />
        }
    </MudStack>
    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mt-8">
        <MudText Typo="Typo.h5">Albums</MudText>
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd">
            <div><MudTextField id="new-album-name" @bind-Value="_newAlbumName" Label="New album" Variant="Variant.Text" Margin="Margin.Dense" ShrinkLabel Immediate /></div>
            <MudIconButton id="create-album" Icon="@Icons.Material.Filled.Add" OnClick="CreateNewAlbum" Size="Size.Small" Disabled="@(string.IsNullOrWhiteSpace(_newAlbumName))" />
        </MudStack>
    </MudStack>
    <MudDivider Class="pa-4 mt-2" />
    <MudStack id="albums" Row="true" Spacing="5" Wrap="Wrap.Wrap">
        @foreach (var album in _childAlbums)
        {
            <AlbumItem Album="album" OnAlbumChanged="@(() => GoToAlbum(album.Id))" />
        }
    </MudStack>
}
<MudOverlay Visible="@(!_loaded)">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

@code {
    public FolderModel CurrentFolder => SessionData.FolderStack.Peek();

    private List<FolderModel> _childFolders = [];
    private List<AlbumModel> _childAlbums = [];

    private string _newFolder = string.Empty;
    private string _newAlbumName = string.Empty;
    private bool _loaded = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (SessionData.FolderStack.Count == 0)
            {
                // We're at root
                var folder = (await ListFolders(Guid.Empty)).Single();
                SessionData.FolderStack.Push(new FolderModel { Id = folder.Id, ParentId = folder.ParentId, Name = folder.Name });
            }

            await RefreshFoldersAndAlbums();

            _loaded = true;
            StateHasChanged();
        }
    }

    private async Task RefreshFolders()
    {
        _childFolders = (await ListFolders(CurrentFolder.Id)).Select(dto => new FolderModel { Id = dto.Id, ParentId = dto.ParentId, Name = dto.Name }).ToList();
    }

    private async Task RefreshAlbums()
    {
        _childAlbums = (await ListAlbums(CurrentFolder.Id)).Select(dto => new AlbumModel { Id = dto.Id, FolderId = dto.FolderId, Name = dto.Name }).ToList();
    }

    private async Task RefreshFoldersAndAlbums()
    {
        await Task.WhenAll(RefreshFolders(), RefreshAlbums());
    }

    private async Task CreateNewFolder()
    {
        await CreateFolder(CurrentFolder.Id, _newFolder);

        await RefreshFolders();
        _newFolder = string.Empty;
    }

    private async Task GotToParentFolder()
    {
        _ = SessionData.FolderStack.Pop();

        await RefreshFoldersAndAlbums();
    }

    private async Task RemoveThisFolder(FolderModel folder)
    {
        await RemoveFolder(folder.ParentId, folder.Id);

        _childFolders.Remove(folder);
    }

    private async Task CreateNewAlbum()
    {
        await CreateAlbum(CurrentFolder.Id, _newAlbumName);
        await RefreshAlbums();
        _newAlbumName = string.Empty;
    }

    private async Task GoToFolder(FolderModel folder)
    {
        SessionData.FolderStack.Push(folder);

        await RefreshFoldersAndAlbums();
    }

    private void GoToAlbum(Guid albumId)
    {
        NavigationManager.NavigateTo($"album/{CurrentFolder.ParentId}/{CurrentFolder.Id}/{albumId}");
    }

    private async Task OpenCurrentFolderSettings()
    {
        var parameters = new DialogParameters<FolderSettingsDialog> { { x => x.Folder, CurrentFolder } };
        var dialog = await DialogService.ShowAsync<FolderSettingsDialog>(default, parameters);
        _ = await dialog.Result;
    }
}